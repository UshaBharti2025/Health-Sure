package com.java.jsf.recipient.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import com.java.jsf.recipient.dao.RecipientDao;
import com.java.jsf.recipient.model.Recipient;

public class RecipientController {

    private RecipientDao recipientDao;
    private Recipient recipient;

    // Search fields
    private String searchHid;
    private String searchFirstName;
    private String searchMobile;
    private String searchCreatedAt;

    //----dropdown search fields----
    private String searchType;
    private String searchValue;

    private List<Recipient> recipientList;

    // ----- Fields for sorting -----
    private String sortColumn = "";
    private boolean sortAscending = true;

    
    // ----- Fields for Pagination  -----
    private int currentPage = 0;
    private int pageSize = 5;

    // ----- Fields for search field contains mode  -----
    private String nameSearchMode = "contains"; // default mode

 // ‚úÖ ‚úÖ ‚úÖ ADD THIS CONSTRUCTOR to fix updateRecipient
    public RecipientController() {
        this.recipientDao = new RecipientDaoImpl();     // üõ†Ô∏è Instantiating DAO
        this.recipient = new Recipient();               // üõ†Ô∏è Ensuring recipient is initialized
    }
    // ----- Getters & Setters -----

    public RecipientDao getRecipientDao() {
        return recipientDao;
    }

    public void setRecipientDao(RecipientDao recipientDao) {
        this.recipientDao = recipientDao;
    }

    public Recipient getRecipient() {
        return recipient;
    }

    public void setRecipient(Recipient recipient) {
        this.recipient = recipient;
    }

    public String getSearchHid() {
        return searchHid;
    }

    public void setSearchHid(String searchHid) {
        this.searchHid = searchHid;
    }

    public String getSearchFirstName() {
        return searchFirstName;
    }

    public void setSearchFirstName(String searchFirstName) {
        this.searchFirstName = searchFirstName;
    }

    public String getSearchMobile() {
        return searchMobile;
    }

    public void setSearchMobile(String searchMobile) {
        this.searchMobile = searchMobile;
    }

    public String getSearchCreatedAt() {
        return searchCreatedAt;
    }

    public void setSearchCreatedAt(String searchCreatedAt) {
        this.searchCreatedAt = searchCreatedAt;
    }

    public List<Recipient> getRecipientList() {
        return recipientList;
    }
    
    //-----For searchType and searchValue for search ----    
    public String getSearchType() {
    	return searchType;
    }
    
    public void setSearchType(String searchType) {
    	this.searchType= searchType;
    }
    
    public String getSearchValue() {
    	return searchValue;
    }
    
    public void setSearchValue(String searchValue) {
    	this.searchValue = searchValue;
    }

    public void setRecipientList(List<Recipient> recipientList) {
        this.recipientList = recipientList;
    }
    
    
    //-----Method For searchMode ----    
    public String getNameSearchMode() {
        return nameSearchMode;
    }

    public void setNameSearchMode(String nameSearchMode) {
        this.nameSearchMode = nameSearchMode;
    }

    
    //----For Sort----     
    public String getSortColumn() {
        return sortColumn;
    }

    public boolean isSortAscending() {
        return sortAscending;
    }

    public int getCurrentPage() {
        return currentPage;
    }

    public int getPageSize() {
        return pageSize;
    }
    
    
    
    /** List of page indexes (0‚Äëbased) that the JSP will iterate over. */
    public List<Integer> getPageIndexes() {
        int pages = getTotalPages();
        List<Integer> list = new ArrayList<Integer>(pages);
        for (int i = 0; i < pages; i++) list.add(i);
        return list;
    }

    /** Action method called by each page‚Äënumber link. */
    public String goToPage(int pageIndex) {
//        this.currentPage = pageIndex;
        return null;                  // stay on same view
    }
 // --- (OPTIONAL) helper for the CSS class -----------
    public String styleClassForPage(int pageIndex) {
        return (currentPage == pageIndex) ? "active-page" : "page-link";
    }
    
    // TO Show all sorted and paginated items
    public List<Recipient> getShowRecipient() {
        if (recipientDao == null) {
            System.out.println("recipientDao not injected!");
            return Collections.emptyList();
        }

        if (recipientList == null ) {
            recipientList = recipientDao.showAllRecipients();
            resetPagination();  // go to page 0
        }

        sortResults(); // Always sort based on current sortColumn + sortAscending
        return getPaginatedList();
    }
    public String getPageLabel(int pageIndex) {
        return String.valueOf(pageIndex + 1);
    }
    
   
    
   
//    ----to ensure that pagination doesnt returns to the empty list----  
//    public List<Recipient> getPaginatedList() {
//        if (recipientList == null) return null;
//
//        int start = currentPage * pageSize;
//        int end = Math.min(start + pageSize, recipientList.size());
//
//        System.out.println("Page: " + currentPage + ", Start: " + start + ", End: " + end + ", Size: " + recipientList.size());
//
//        if (start >= end) {
//            currentPage = 0;
//            start = 0;
//            end = Math.min(pageSize, recipientList.size());
//        }
//
//        return recipientList.subList(start, end);
//    }

    
    public String refreshRecipientList() {
        this.recipientList = null;
        this.sortColumn = "";
        this.sortAscending = true;
        this.currentPage = 0;
        return null;
    }


    // ----Sorting----- 
    public String sortBy(String column) {
        if (column.equals(this.sortColumn)) {
            this.sortAscending = !this.sortAscending;
        } else {
            this.sortColumn = column;
            this.sortAscending = true;
        }
//        System.out.println("Sorting by: " + sortColumn + " | Ascending: " + sortAscending);
//        sortResults(); // still fine to have it here
        resetPagination();
        return null;
    }


    private void sortResults() {
        if (recipientList == null || recipientList.isEmpty()) return;

        Collections.sort(recipientList, new Comparator<Recipient>() {
            public int compare(Recipient r1, Recipient r2) {
                int result = 0;
                switch (sortColumn) {
                    case "hId":
                        result = r1.gethId().compareToIgnoreCase(r2.gethId());
                        break;
                    case "firstName":
                        result = r1.getFirstName().compareToIgnoreCase(r2.getFirstName());
                        break;
                    case "lastName":
                        result = r1.getLastName().compareToIgnoreCase(r2.getLastName());
                        break;
                    case "mobile":
                        result = r1.getMobile().compareToIgnoreCase(r2.getMobile());
                        break;
                    case "email":
                        result = r1.getEmail().compareToIgnoreCase(r2.getEmail());
                        break;
                    case "address":
                        result = r1.getAddress().compareToIgnoreCase(r2.getAddress());
                        break;
                    case "createdAt":
                        result = r1.getCreatedAt().compareTo(r2.getCreatedAt());
                        break;
                    default:
                        result = 0;
                }
                return sortAscending ? result : -result;
            }
        });
    }

    // ----Pagination Methods-----
    private List<Recipient> getPaginatedList() {

        if (recipientList == null || recipientList.isEmpty()) return Collections.emptyList();

        int start = currentPage * pageSize;
        int end   = Math.min(start + pageSize, recipientList.size());

        // protect against out‚Äëof‚Äërange index (e.g. list shrank):
        if (start >= recipientList.size()) {
            currentPage = 0;
            start = 0;
            end   = Math.min(pageSize, recipientList.size());
        }
        return recipientList.subList(start, end);
    }

    public int getTotalPages() {
        return recipientList == null ? 1
             : (int) Math.ceil((double) recipientList.size() / pageSize);
    }

    public boolean isNextButtonDisabled() {
        return recipientList == null || (currentPage >= getTotalPages() - 1);
    }
    public boolean isPreviousButtonDisabled() { return currentPage == 0; }

    public String nextPage()      { if (!isNextButtonDisabled())     currentPage++; return null; }
    public String previousPage()  { if (!isPreviousButtonDisabled()) currentPage--; return null; }

    private void resetPagination() { currentPage = 0; }


//    public List<Recipient> getPaginatedList() {
//        if (recipientList == null || recipientList.isEmpty()) return Collections.emptyList();
//
//        int start = currentPage * pageSize;
//        int end = Math.min(start + pageSize, recipientList.size());
//
//        if (start >= recipientList.size()) {
//            currentPage = 0;
//            start = 0;
//            end = Math.min(pageSize, recipientList.size());
//        }
//
//        return recipientList.subList(start, end);
//    }
//
//    public String setCurrentPage(int pageIndex) {
//        this.currentPage = pageIndex;
//        return null;
//    }
//
//
//
//    public int getTotalPages() {
//        if (recipientList == null || recipientList.isEmpty()) return 1;
//        return (int) Math.ceil((double) recipientList.size() / pageSize);
//    }
//
//    public boolean isNextButtonDisabled() {
//        if (recipientList == null) return true;
//        return ((currentPage + 1) * pageSize) >= recipientList.size();
//    }
//
//    public boolean isPreviousButtonDisabled() {
//        return currentPage == 0;
//    }
//
//    public String nextPage() {
//        if (currentPage < getTotalPages() - 1) {
//            currentPage++;
//        }
//        return null;
//    }
//
//    public String previousPage() {
//        if (currentPage > 0) {
//            currentPage--;
//        }
//        return null;
//    }
//
//    public void resetPagination() {
//        currentPage = 0;
//    }

    
    // Combined Dispatcher for dropdown
    public String search() {
        if (searchType == null || searchValue == null || searchValue.trim().isEmpty()) {
            recipient = null;
            recipientList = new ArrayList<>();
            return "SearchRecipient1";
        }

        switch (searchType) {
            case "hid":
                searchHid = searchValue;
                searchByHid(); // recipient will be set
                recipientList = null; // clear any list
                break;
            case "firstName":
                searchFirstName = searchValue;
                searchByFirstName(); // recipientList will be set
                recipient = null;
                break;
            case "mobile":
                searchMobile = searchValue;
                searchByMobile();
                recipient = null;
                break;
            case "createdAt":
                searchCreatedAt = searchValue;
                searchByCreatedAt();
                recipient = null;
                break;
            default:
                recipient = null;
                recipientList = new ArrayList<>();
        }
        return "SearchRecipient1";
    }


    
    
    //Search Methods (reuse list for pagination)
    public void searchByHid() {
        recipient = recipientDao.searchByHid(searchHid);
    }

    public void searchByFirstName() {
        if ("startsWith".equalsIgnoreCase(nameSearchMode)) {
            recipientList = recipientDao.searchByFirstNameStartsWith(searchFirstName);
        } else {
            recipientList = recipientDao.searchByFirstNameContains(searchFirstName);
        }

        System.out.println("Recipient list size (first name search): " + recipientList.size());
        sortResults();
        resetPagination();
    }
    
    

    public void searchByMobile() {
        recipientList = recipientDao.searchByMobile(searchMobile);
        sortResults();
        resetPagination();
    }

    public void searchByCreatedAt() {
        recipientList = recipientDao.searchByCreatedAt(searchCreatedAt);
        sortResults();
        resetPagination();
    }

    public String updateRecipient() {
        return recipientDao.updateRecipient(recipient);
    }
    
    public List<Recipient> getResultList() {
        if (recipientList != null && !recipientList.isEmpty()) {
            return recipientList;
        } else if (recipient != null) {
            return Arrays.asList(recipient);
        }
        return Collections.emptyList();
    }
    
   //------UPDATE methods-----    
//    this.recipient = new Recipient();

    
}





//
//import java.util.ArrayList;
//import java.util.Collections;
//import java.util.Comparator;
//import java.util.List;
//
//import com.java.jsf.recipient.dao.RecipientDao;
//import com.java.jsf.recipient.model.Recipient;
//
//public class RecipientController {
//
//    private RecipientDao recipientDao;
//    private Recipient recipient;
//
//    private String searchHid;
//    private String searchFirstName;
//    private String searchMobile;
//    private String searchCreatedAt;
//
//    private List<Recipient> recipientList;
//
//    // -----Sorting fields------
//    private String sortColumn = "hId";
//    private boolean sortAscending = true;
//
//    // ---------- GETTERS & SETTERS ----------
//    
//    public RecipientDao getRecipientDao() {
//        return recipientDao;
//    }
//
//    public void setRecipientDao(RecipientDao recipientDao) {
//        this.recipientDao = recipientDao;
//    }
//
//    public Recipient getRecipient() {
//        return recipient;
//    }
//
//    public void setRecipient(Recipient recipient) {
//        this.recipient = recipient;
//    }
//
//    public String getSearchHid() {
//        return searchHid;
//    }
//
//    public void setSearchHid(String searchHid) {
//        this.searchHid = searchHid;
//    }
//
//    public String getSearchFirstName() {
//        return searchFirstName;
//    }
//
//    public void setSearchFirstName(String searchFirstName) {
//        this.searchFirstName = searchFirstName;
//    }
//
//    public String getSearchMobile() {
//        return searchMobile;
//    }
//
//    public void setSearchMobile(String searchMobile) {
//        this.searchMobile = searchMobile;
//    }
//
//    public String getSearchCreatedAt() {
//        return searchCreatedAt;
//    }
//
//    public void setSearchCreatedAt(String searchCreatedAt) {
//        this.searchCreatedAt = searchCreatedAt;
//    }
//
//    public List<Recipient> getRecipientList() {
//        return recipientList;
//    }
//
//    public void setRecipientList(List<Recipient> recipientList) {
//        this.recipientList = recipientList;
//    }
//
//    public String getSortColumn() {
//        return sortColumn;
//    }
//
//    public boolean isSortAscending() {
//        return sortAscending;
//    }
//
//    // -------TO Display recipients with sorting------
//    public List<Recipient> getShowRecipient() {
//        if (recipientDao == null) {
//            System.out.println("‚ùå recipientDao not injected!");
//            return new ArrayList<>();
//        }
//
//        recipientList = recipientDao.showAllRecipients();
//        sortResults(); // sort after fetching
//        return recipientList;
//    }
//
//    // -----will trigger from UI on column header click------
//    public String sortBy(String column) {
//        if (column.equals(this.sortColumn)) {
//            this.sortAscending = !this.sortAscending; // toggle direction
//        } else {
//            this.sortColumn = column;
//            this.sortAscending = true;
//        }
//        sortResults(); // re-sort list
//        return null;
//    }
//
//    //------ actual sort-------
//    private void sortResults() {
//        if (recipientList == null) return;
//
//        Collections.sort(recipientList, new Comparator<Recipient>() {
//            @Override
//            public int compare(Recipient r1, Recipient r2) {
//                int result = 0;
//
//                switch (sortColumn) {
//                    case "hId":
//                        result = r1.gethId().compareToIgnoreCase(r2.gethId());
//                        break;
//                    case "firstName":
//                        result = r1.getFirstName().compareToIgnoreCase(r2.getFirstName());
//                        break;
//                    case "lastName":
//                        result = r1.getLastName().compareToIgnoreCase(r2.getLastName());
//                        break;
//                    case "mobile":
//                        result = r1.getMobile().compareToIgnoreCase(r2.getMobile());
//                        break;
//                    case "email":
//                        result = r1.getEmail().compareToIgnoreCase(r2.getEmail());
//                        break;
//                    case "address":
//                        result = r1.getAddress().compareToIgnoreCase(r2.getAddress());
//                        break;
//                    case "createdAt":
//                        result = r1.getCreatedAt().compareTo(r2.getCreatedAt());
//                        break;
//                    default:
//                        result = 0;
//                }
//
//                return sortAscending ? result : -result;
//            }
//        });
//    }
//
//    
//    // ‚úÖ Pagination Methods
//
//    public List<Recipient> getPaginatedList() {
//        if (recipientList == null) return null;
//
//        int start = currentPage * pageSize;
//        int end = Math.min(start + pageSize, recipientList.size());
//
//        if (start >= end) {
//            currentPage = 0;
//            start = 0;
//            end = Math.min(pageSize, recipientList.size());
//        }
//
//        return recipientList.subList(start, end);
//    }
//
//    public int getTotalPages() {
//        if (recipientList == null || recipientList.isEmpty()) return 1;
//        return (int) Math.ceil((double) recipientList.size() / pageSize);
//    }
//
//    public boolean isNextButtonDisabled() {
//        if (recipientList == null) return true;
//        return ((currentPage + 1) * pageSize) >= recipientList.size();
//    }
//
//    public boolean isPreviousButtonDisabled() {
//        return currentPage == 0;
//    }
//
//    public String nextPage() {
//        if (currentPage < getTotalPages() - 1) {
//            currentPage++;
//        }
//        return null;
//    }
//
//    public String previousPage() {
//        if (currentPage > 0) {
//            currentPage--;
//        }
//        return null;
//    }
//
//    public void resetPagination() {
//        currentPage = 0;
//    }
//
//    // ‚úÖ Search Methods (reuse list for pagination)
//    public void searchByHid() {
//        recipient = recipientDao.searchByHid(searchHid);
//    }
//
//    public void searchByFirstName() {
//        recipientList = recipientDao.searchByFirstName(searchFirstName);
//        sortResults();
//        resetPagination();
//    }
//
//    public void searchByMobile() {
//        recipientList = recipientDao.searchByMobile(searchMobile);
//        sortResults();
//        resetPagination();
//    }
//
//    public void searchByCreatedAt() {
//        recipientList = recipientDao.searchByCreatedAt(searchCreatedAt);
//        sortResults();
//        resetPagination();
//    }
//
//    public String updateRecipient() {
//        return recipientDao.updateRecipient(recipient);
//    }
//}
//    
//    
//    
//    
//    
//    // ------Other search/update methods-------
//    public void searchByHid() {
//        recipient = recipientDao.searchByHid(searchHid);
//    }
//
//    public void searchByFirstName() {
//        recipientList = recipientDao.searchByFirstName(searchFirstName);
//    }
//
//    public void searchByMobile() {
//        recipientList = recipientDao.searchByMobile(searchMobile);
//    }
//
//    public void searchByCreatedAt() {
//        recipientList = recipientDao.searchByCreatedAt(searchCreatedAt);
//    }
//
//    public String updateRecipient() {
//        return recipientDao.updateRecipient(recipient);
//    }
//}



//-------SEARCH FILED-------
//    private String searchType = "";
//    private String nameSearchMode = "";
// 
//    private String sortColumn = "";
//    private boolean sortAscending = true;
// 
//    private int currentPage = 0;
//    private int pageSize = 5;
// 
//    public String confirmSearchType() {
//        if (!"name".equals(this.searchType)) {
//            this.nameSearchMode = ""; // clear if switched from 'name'
//        }
//        return null;
//    }
// 
//    public String searchProcedures() {
//        FacesContext context = FacesContext.getCurrentInstance();
// 
//        if (searchType == null || searchType.trim().isEmpty()) {
//            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Please select a search type.", null));
//            return null;
//        }
// 
//        if (searchKey == null || searchKey.trim().isEmpty()) {
//            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Search value cannot be empty.", null));
//            return null;
//        }
// 
//        String trimmedKey = searchKey.trim();
// 
//        switch (searchType) {
//            case "hid":
//                if (!trimmedKey.matches("^HID\\d{3}$")) {
//                    context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "HID must be in format HID001.", null));
//                    return null;
//                }
//                searchResults = medicalProcedureDao.searchByHid(trimmedKey);
//                break;
// 
//            case "name":
//                if (nameSearchMode == null || nameSearchMode.trim().isEmpty()) {
//                    context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Please select Name search mode (StartsWith or Contains).", null));
//                    return null;
//                }
//                if ("startsWith".equals(nameSearchMode)) {
//                    searchResults = medicalProcedureDao.searchByNameStartsWith(trimmedKey);
//                } else if ("contains".equals(nameSearchMode)) {
//                    searchResults = medicalProcedureDao.searchByNameContains(trimmedKey);
//                }
//                break;
// 
//            case "mobile":
//                if (!trimmedKey.matches("^[6-9]\\d{9}$")) {
//                    context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Enter a valid 10-digit phone number.", null));
//                    return null;
//                }
//                searchResults = medicalProcedureDao.searchByMobile(trimmedKey);
//                break;
// 
//            default:
//                context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid search type selected.", null));
//                searchResults = null;
//        }
// 
//        sortResults();
//        resetPagination();
//        return null;
//    }
// 




//------SORTING-------
//    public String sortBy(String column) {
//        if (column.equals(this.sortColumn)) {
//            this.sortAscending = !this.sortAscending;
//        } else {
//            this.sortColumn = column;
//            this.sortAscending = true;
//        }
//        sortResults();
//        resetPagination();
//        return null;
//    }
// 
//    private void sortResults() {
//        if (searchResults == null) return;
// 
//        Collections.sort(searchResults, new Comparator<MedicalProcedure>() {
//            public int compare(MedicalProcedure p1, MedicalProcedure p2) {
//                int result = 0;
//                switch (sortColumn) {
//                    case "procedureId":
//                        result = p1.getProcedureId().compareTo(p2.getProcedureId());
//                        break;
//                    case "procedureDate":
//                        result = p1.getProcedureDate().compareTo(p2.getProcedureDate());
//                        break;
//                    case "diagnosis":
//                        result = p1.getDiagnosis().compareTo(p2.getDiagnosis());
//                        break;
//                    case "recommendations":
//                        result = p1.getRecommendations().compareTo(p2.getRecommendations());
//                        break;
//                    case "createdAt":
//                        result = p1.getCreatedAt().compareTo(p2.getCreatedAt());
//                        break;
//                    case "recipientName":
//                        result = (p1.getRecipient().getFirstName() + p1.getRecipient().getLastName())
//                            .compareTo(p2.getRecipient().getFirstName() + p2.getRecipient().getLastName());
//                        break;
//                    default:
//                        result = 0;
//                }
//                return sortAscending ? result : -result;
//            }
//        });
//    }
// 







//------PAGENATION------
//    public List<MedicalProcedure> getPaginatedList() {
//        if (searchResults == null) return null;
// 
//        int start = currentPage * pageSize;
//        int end = Math.min(start + pageSize, searchResults.size());
// 
//        if (start >= end) {
//            currentPage = 0;
//            start = 0;
//            end = Math.min(pageSize, searchResults.size());
//        }
// 
//        return searchResults.subList(start, end);
//    }
// 
//    public int getTotalPages() {
//        if (searchResults == null || searchResults.isEmpty()) return 1;
//        return (int) Math.ceil((double) searchResults.size() / pageSize);
//    }
// 
//    public boolean isNextButtonDisabled() {
//        if (searchResults == null) return true;
//        return ((currentPage + 1) * pageSize) >= searchResults.size();
//    }
// 
//    public boolean isPreviousButtonDisabled() {
//        return currentPage == 0;
//    }
// 
//    public String nextPage() {
//        if (currentPage < getTotalPages() - 1) {
//            currentPage++;
//        }
//        return null;
//    }
// 
//    public String previousPage() {
//        if (currentPage > 0) {
//            currentPage--;
//        }
//        return null;
//    }
// 
//    public void resetPagination() {
//        currentPage = 0;
//    }
// 






//    public String resetForm() {
//        this.searchType = "";
//        this.nameSearchMode = "";
//        this.searchKey = null;
//        this.searchResults = null;
//        return null;
//    }
// 
//    // Getters and Setters
// 
//    public String getSearchKey() {
//        return searchKey;
//    }
// 
//    public void setSearchKey(String searchKey) {
//        this.searchKey = searchKey;
//    }
// 
//    public List<MedicalProcedure> getSearchResults() {
//        return searchResults;
//    }
// 
//    public void setSearchResults(List<MedicalProcedure> searchResults) {
//        this.searchResults = searchResults;
//    }
// 
//    public MedicalProcedureDao getMedicalProcedureDao() {
//        return medicalProcedureDao;
//    }
// 
//    public void setMedicalProcedureDao(MedicalProcedureDao medicalProcedureDao) {
//        this.medicalProcedureDao = medicalProcedureDao;
//    }
// 
//    public MedicalProcedure getMedicalProcedure() {
//        return medicalProcedure;
//    }
// 
//    public void setMedicalProcedure(MedicalProcedure medicalProcedure) {
//        this.medicalProcedure = medicalProcedure;
//    }
// 
//    public String getSearchType() {
//        return searchType;
//    }
// 
//    public void setSearchType(String searchType) {
//        this.searchType = searchType;
//    }
// 
//    public String getNameSearchMode() {
//        return nameSearchMode;
//    }
// 
//    public void setNameSearchMode(String nameSearchMode) {
//        this.nameSearchMode = nameSearchMode;
//    }
// 
//    public int getCurrentPage() {
//        return currentPage;
//    }
// 
//    public void setCurrentPage(int currentPage) {
//        this.currentPage = currentPage;
//    }
// 
//    public int getPageSize() {
//        return pageSize;
//    }
// 
//    public void setPageSize(int pageSize) {
//        this.pageSize = pageSize;
//    }
// 
//    public String getSortColumn() {
//        return sortColumn;
//    }
// 
//    public void setSortColumn(String sortColumn) {
//        this.sortColumn = sortColumn;
//    }
// 
//    public boolean isSortAscending() {
//        return sortAscending;
//    }
// 
//    public void setSortAscending(boolean sortAscending) {
//        this.sortAscending = sortAscending;
//    }
//}
// 
