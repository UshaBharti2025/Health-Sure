package com.java.jsf.recipient.dao;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.java.jsf.recipient.model.Recipient;
import com.java.jsf.recipient.util.SessionHelper;

public class RecipientDaoImpl implements RecipientDao {
	
	SessionFactory sf;
	Session session;

	@Override
    public Recipient searchByHid(String hId) {
        sf = SessionHelper.getSessionFactory();
        session = sf.openSession();
        Query query = session.getNamedQuery("searchByHid");
        query.setParameter("hId", hId);
        Recipient recipient = (Recipient)  query.uniqueResult();
        
        if (recipient == null) {
            System.out.println("No recipient found for hId: " + hId);
        }
        
        return recipient;
        
    }

	@Override
	public List<Recipient> searchByFirstNameStartsWith(String firstName) {
	    sf = SessionHelper.getSessionFactory();
	    session = sf.openSession();
	    try {
	        Query query = session.createQuery("from Recipient where lower(firstName) like :name");
	        query.setParameter("name", firstName.toLowerCase() + "%");
	        return query.list();
	    } finally {
	        session.close();
	    }
	}

	
	@Override
	public List<Recipient> searchByFirstNameContains(String firstName) {
	    sf = SessionHelper.getSessionFactory();
	    session = sf.openSession();
	    try {
	        Query query = session.createQuery("from Recipient where lower(firstName) like :name");
	        query.setParameter("name", "%" + firstName.toLowerCase() + "%");
	        return query.list();
	    } finally {
	        session.close();
	    }
	}

	
	


	@Override
	public List<Recipient> searchByMobile(String mobile) {
		
		sf = SessionHelper.getSessionFactory();
        session = sf.openSession();
	    if (mobile == null || mobile.trim().isEmpty()) {
	        return new ArrayList<>();
	    }

	    sf = SessionHelper.getSessionFactory();
	    session = sf.openSession();
	    Query query = session.getNamedQuery("searchByMobile");
	    query.setParameter("mobile", "%" + mobile + "%");
	    return query.list();
	}


    @Override
    public List<Recipient> searchByCreatedAt(String createdAt) {
    	sf = SessionHelper.getSessionFactory();
        session = sf.openSession();
        Query query = session.getNamedQuery("searchByCreatedAt");
        query.setParameter("createdAt", "%" + createdAt + "%");
        return query.list();
    }

    @Override
    public List<Recipient> showAllRecipients() {
    	sf = SessionHelper.getSessionFactory();
        session = sf.openSession();
        Query query = session.getNamedQuery("showAllRecipients");
        List<Recipient> recipientList = query.list();
        return recipientList;
//        return list != null ? list : new ArrayList<>(); 
        
    }

    @Override
    public String updateRecipient(Recipient recipient) {
        FacesContext context = FacesContext.getCurrentInstance();
        boolean isValid = true;

        // ✅ Step 1: Validate fields
        if (recipient.getFirstName() == null || recipient.getFirstName().trim().length() < 2) {
            context.addMessage("firstName", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Invalid First Name", "First name must be at least 2 characters."));
            isValid = false;
        }

        if (recipient.getMobile() == null || !recipient.getMobile().matches("\\d{10}")) {
            context.addMessage("mobile", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Invalid Mobile", "Mobile number must be 10 digits."));
            isValid = false;
        }

        if (!isValid) {
            context.validationFailed();
            return null;
        }

        // ✅ Step 2: Check if hId is null (to avoid TransientObjectException)
        if (recipient.gethId() == null || recipient.gethId().trim().isEmpty()) {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Missing Health ID", "Cannot update recipient with missing ID."));
            return null;
        }

        // ✅ Step 3: Start Hibernate update
        sf = SessionHelper.getSessionFactory();
        session = sf.openSession();
        Transaction transaction = session.beginTransaction();

        try {
            // Load original recipient from DB (safe)
            Recipient existing = (Recipient) session.get(Recipient.class, recipient.gethId());

            if (existing == null) {
                context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Recipient not found", "No recipient exists with the given Health ID."));
                return null;
            }

            // ✅ Step 4: Copy updated fields
            existing.setFirstName(recipient.getFirstName());
            existing.setLastName(recipient.getLastName());
            existing.setMobile(recipient.getMobile());
            existing.setEmail(recipient.getEmail());

            // (Optional) copy more fields if needed
            // existing.setAddress(...);

            session.update(existing);
            transaction.commit();

            // ✅ Step 5: Update session map
            Map<String, Object> sessionMap = context.getExternalContext().getSessionMap();
            sessionMap.put("updatedRecipient", existing);

            return "UpdateSuccess.jsp?faces-redirect=true";

        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Update Failed", "Something went wrong during update."));
            e.printStackTrace();
            return null;

        } finally {
            session.close();
        }
        
    }
	
}
