package com.java.jsf.recipient.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import com.java.jsf.recipient.dao.RecipientDao;
import com.java.jsf.recipient.dao.RecipientDaoImpl;
import com.java.jsf.recipient.model.Recipient;

public class RecipientController {
	

	
	
    private RecipientDao recipientDao;
    private Recipient recipient;

    // Search fields
    private String searchHid;
    private String searchFirstName;
    private String searchMobile;
    private String searchCreatedAt;

    //----dropdown search fields----
    private String searchType;
    private String searchValue;

    private List<Recipient> recipientList;

    // ----- Fields for sorting -----
    private String sortColumn = "";
    private boolean sortAscending = true;

    
 // Pagination and search helpers
    private List<Recipient> resultList;
//    private List<Recipient> paginatedSearchList;
    private int totalPages = 0;

    

    // ----- Fields for Pagination  -----
    
    private int currentPage = 0;
    private int pageSize = 10;

    // ----- Fields for search field contains mode  -----
    private String nameSearchMode = ""; // default mode

    
    // CONSTRUCTOR to fix updateRecipient
    public RecipientController() {
    this.nameSearchMode = "contains"; // Default to "contains"
    }
    
    
//  -----------HYPERLINK 1---------
//  public String prepareUpdate() {
//      this.recipient = this.selectedRecipient; // Copy selected object
//      return "UpdateRecipient1";  // Name of the update JSP without extension
//  }
    public String prepareUpdate() {
        // Read parameter sent from <f:param>
        String hId = FacesContext.getCurrentInstance()
                      .getExternalContext()
                      .getRequestParameterMap()
                      .get("hid");

        System.out.println("prepareUpdate() called for hId: " + hId);

        // Fetch from DAO using hId
        this.recipient = recipientDao.getRecipientByhId(hId);
        this.recipientLoaded = true; // Mark as loaded manually

        return "UpdateRecipient1";  // Navigate to update page
    }
    
//  ========================Hyperlink 3===========================


	private boolean recipientLoaded = false;

    public Recipient getRecipient() {
        if (!recipientLoaded) {
            loadRecipientForUpdate();
            recipientLoaded = true;
        }
        return this.recipient;
    }
    
//  ==================hyperlink 4=====================
    public void loadRecipientForUpdate() {
        if (recipientLoaded) {
            return; // prevent unnecessary reload
        }

        try {
            FacesContext context = FacesContext.getCurrentInstance();
            Map<String, String> params = context.getExternalContext().getRequestParameterMap();
            String hidParam = params.get("hid");

            if (hidParam != null && !hidParam.trim().isEmpty()) {
                this.recipient = recipientDao.getRecipientByhId(hidParam);

                if (this.recipient != null) {
                    // Optional: Set form fields if needed
                    this.searchHid = recipient.gethId();
                    this.searchFirstName = recipient.getFirstName();
                    this.searchMobile = recipient.getMobile();
//                  this.searchCreatedAt = recipient.getCreatedAt(); // Uncomment if needed

                    System.out.println("Recipient loaded successfully for update.");
                    recipientLoaded = true;
                } else {
                    System.out.println("No recipient found for given hId.");
                }
                
            } else {
                System.out.println("hid parameter is missing in URL.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    
  
//--- SHOW PAGE NAVIGATION METHOD ---
  public String goToShowPage() {
      this.recipientList = null;   // force a fresh fetch
      this.sortColumn    = "";     // optional: reset sort
      this.currentPage   = 0;      // optional: reset pagination
      return "ShowRecipient1";     // target JSF page
  }
    
    // ----- Getters & Setters -----

    public RecipientDao getRecipientDao() {
        return recipientDao;
    }

    public void setRecipientDao(RecipientDao recipientDao) {
        this.recipientDao = recipientDao;
    }

//    public Recipient getRecipient() {
//        return recipient;
//    }

    public void setRecipient(Recipient recipient) {
        this.recipient = recipient;
    }
    
//===============HYPERLINK 2==================
    private Recipient selectedRecipient;  // TEMPORARY holder

    // Getter and Setter for selectedRecipient
    public Recipient getSelectedRecipient() {
     return selectedRecipient;
    }
    
    public void setSelectedRecipient(Recipient selectedRecipient) {
     this.selectedRecipient = selectedRecipient;
    }
    




    public String getSearchHid() {
        return searchHid;
    }

    public void setSearchHid(String searchHid) {
        this.searchHid = searchHid;
    }

    public String getSearchFirstName() {
        return searchFirstName;
    }

    public void setSearchFirstName(String searchFirstName) {
        this.searchFirstName = searchFirstName;
    }

    public String getSearchMobile() {
        return searchMobile;
    }

    public void setSearchMobile(String searchMobile) {
        this.searchMobile = searchMobile;
    }

    public String getSearchCreatedAt() {
        return searchCreatedAt;
    }

    public void setSearchCreatedAt(String searchCreatedAt) {
        this.searchCreatedAt = searchCreatedAt;
    }

    public List<Recipient> getRecipientList() {
        return recipientList;
    }
    
    //-----For searchType and searchValue for search ----    
    public String getSearchType() {
    	return searchType;
    }
    
    public void setSearchType(String searchType) {
    	this.searchType= searchType;
    }
    
    public String getSearchValue() {
    	return searchValue;
    }
    
    public void setSearchValue(String searchValue) {
    	this.searchValue = searchValue;
    }

    public void setRecipientList(List<Recipient> recipientList) {
        this.recipientList = recipientList;
    }
    
    
    //-----Method For searchMode ----    
    public String getNameSearchMode() {
        return nameSearchMode;
    }

    public void setNameSearchMode(String nameSearchMode) {
        this.nameSearchMode = nameSearchMode;
    }

    
    //----For Sort----     
    public String getSortColumn() {
        return sortColumn;
    }

    public boolean isSortAscending() {
        return sortAscending;
    }

    public int getCurrentPage() {
        return currentPage;
    }

    public int getPageSize() {
        return pageSize;
    }
    
    /** List of page indexes (0‑based) that the JSP will iterate over. */
    public List<Integer> getPageIndexes() {
        int pages = getTotalPages();
        List<Integer> list = new ArrayList<Integer>(pages);
        for (int i = 0; i < pages; i++) list.add(i);
        return list;
    }

    /** Action method called by each page‑number link. */
    public String goToPage(int pageIndex) {
//        this.currentPage = pageIndex;
        return null;                  // stay on same view
    }
    
    
 // --- (OPTIONAL) helper for the CSS class -----------
    public String styleClassForPage(int pageIndex) {
        return (currentPage == pageIndex) ? "active-page" : "page-link";
    }
    
    // TO Show all sorted and paginated items
    public List<Recipient> getShowRecipient() {
        if (recipientDao == null) {
            System.out.println("recipientDao not injected!");
            return Collections.emptyList();
        }

        if (recipientList == null ) {
            recipientList = recipientDao.showAllRecipients();
            resetPagination();  // go to page 0
        }

        sortResults(); // Always sort based on current sortColumn + sortAscending
        return getPaginatedList();
    }
    public String getPageLabel(int pageIndex) {
        return String.valueOf(pageIndex + 1);
    }
 

    // -----------SORTING---------------- 
    public String sortBy(String column) {
        if (column.equals(this.sortColumn)) {
            this.sortAscending = !this.sortAscending;
        } else {
            this.sortColumn = column;
            this.sortAscending = true;
        }
//        System.out.println("Sorting by: " + sortColumn + " | Ascending: " + sortAscending);
//        sortResults(); // still fine to have it here
        resetPagination();
        return null;
    }


    private void sortResults() {
        if (recipientList == null || recipientList.isEmpty()) {
            return;
        }

        Collections.sort(recipientList, new Comparator<Recipient>() {
            public int compare(Recipient r1, Recipient r2) {
                // Handle null objects
                if (r1 == null && r2 == null) return 0;
                if (r1 == null) return -1;
                if (r2 == null) return 1;

                int result = 0;
                try {
                    switch (sortColumn) {
                        case "hId":
                            result = compareStrings(r1.gethId(), r2.gethId());
                            break;
                        case "firstName":
                            result = compareStrings(r1.getFirstName(), r2.getFirstName());
                            break;
                        case "lastName":
                            result = compareStrings(r1.getLastName(), r2.getLastName());
                            break;
                        case "mobile":
                            result = compareStrings(r1.getMobile(), r2.getMobile());
                            break;
                        case "email":
                            result = compareStrings(r1.getEmail(), r2.getEmail());
                            break;
                        case "address":
                            result = compareStrings(r1.getAddress(), r2.getAddress());
                            break;
                        case "createdAt":
                            result = compareDates(r1.getCreatedAt(), r2.getCreatedAt());
                            break;
                        default:
                            result = 0;
                    }
                    
                } catch (NullPointerException e) {
                    result = 0; // Fallback if any field is null
                }
                return sortAscending ? result : -result;
            }

            private int compareStrings(String s1, String s2) {
                if (s1 == null && s2 == null) return 0;
                if (s1 == null) return -1;
                if (s2 == null) return 1;
                return s1.compareToIgnoreCase(s2);
            }

            private int compareDates(Date d1, Date d2) {
                if (d1 == null && d2 == null) return 0;
                if (d1 == null) return -1;
                if (d2 == null) return 1;
                return d1.compareTo(d2);
            }
        });
    }
    
    // -----------Pagination Methods---------------
    public List<Recipient> getPaginatedList() {
        if (recipientList == null || recipientList.isEmpty()) {
            return Collections.emptyList();
        }

        int start = currentPage * pageSize;
        int end = Math.min(start + pageSize, recipientList.size());

        // Additional null check
        if (start >= recipientList.size() || start < 0) {
            currentPage = 0;
            start = 0;
            end = Math.min(pageSize, recipientList.size());
        }
        
        return recipientList.subList(start, end);
    }

    public int getTotalPages() {
        return recipientList == null ? 1
             : (int) Math.ceil((double) recipientList.size() / pageSize);
    }

    public boolean isNextButtonDisabled() {
        return recipientList == null || (currentPage >= getTotalPages() - 1);
    }
    public boolean isPreviousButtonDisabled() { return currentPage == 0; }

    public String nextPage()      { if (!isNextButtonDisabled())     currentPage++; return null; }
    public String previousPage()  { if (!isPreviousButtonDisabled()) currentPage--; return null; }

    private void resetPagination() { currentPage = 0; }
    
    public String getPageNumberDisplay() {
        int total = getTotalPages();
        if (total == 0) total = 1;
        return "Page " + (currentPage + 1) + " of " + total;
    }



//    ===========new fields for created at 0r date range=============
    
    private String fromDate;
    private String toDate;

    public String getFromDate() {
        return fromDate;
    }

    public void setFromDate(String fromDate) {
        this.fromDate = fromDate;
    }

    public String getToDate() {
        return toDate;
    }

    public void setToDate(String toDate) {
        this.toDate = toDate;
    }
    
    private String searchCreatedAtStart;
    private String searchCreatedAtEnd;

    
    
    public String getSearchCreatedAtStart() {
		return searchCreatedAtStart;
	}

	public void setSearchCreatedAtStart(String searchCreatedAtStart) {
		this.searchCreatedAtStart = searchCreatedAtStart;
	}
	
	public String getSearchCreatedAtEnd() {
		return searchCreatedAtEnd;
	}
	
	public void setSearchCreatedAtEnd(String searchCreatedAtEnd) {
		this.searchCreatedAtEnd = searchCreatedAtEnd;
	}

	
	public void searchByCreatedAtRange() {
	    FacesContext context = FacesContext.getCurrentInstance();

	    if (fromDate != null && toDate != null && !fromDate.isEmpty() && !toDate.isEmpty()) {
	        recipientList = recipientDao.searchByCreatedAtRange(fromDate, toDate);
	        sortResults();
	        resetPagination();
	    } else {
	        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
	                "Please provide both From and To dates.", null));
	        searchPerformed = false;
	    }
	}

	



//------------SEARCH METHOD WITH VALIDATIONS----------
    public String search() {
        // Reset previous results
        recipient = null;
        recipientList = null;

    	 System.out.println("=== STARTING SEARCH ===");
    	    System.out.println("Search type: " + searchType);
    	    System.out.println("Search value: " + searchValue);
    	    System.out.println("Name search mode: " + nameSearchMode);    	
        FacesContext context = FacesContext.getCurrentInstance();

        // Common validation
        if (searchType == null || searchType.trim().isEmpty()) {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                "Please select a search type.", null));
            searchPerformed = false;
            return null;
//            return "SearchRecipient1";
        }

        if (searchValue == null || searchValue.trim().isEmpty()) {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                "Please enter a value for search.", null));
            searchPerformed = false;
            return null;

//            return "SearchRecipient1";
        }
        
        
        this.searchPerformed = true;

        switch (searchType) {
            case "hid":
                // Normalize to uppercase and trim spaces
                searchValue = searchValue.trim().toUpperCase();
                searchHid = searchValue;

                // Match HID followed by 3 digits only
                if (!searchHid.matches("HID\\d{3}")) {
                    context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Invalid Health ID.HID must be in format HID followed by 3 digits (e.g. HID001)", null));
                    recipient = null;
                    searchPerformed = false;
                    return null; //Stay on same page — error message visible
                    // return "searchRecipient1";Page reloads — message lost
                }

                searchByHid();  // this method will use searchHid
                recipientList = null;
                break;

            case "firstName":
                if (!searchValue.matches("[a-zA-Z]+")) {
                    context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "First name should contain only alphabets.", null));
                    searchPerformed = false;
                    return null;
//                  return "SearchRecipient1";            
                    }
                searchFirstName = searchValue;
                searchByFirstName();
//                recipient = null;
                break;

                
            case "mobile":
                if (!searchValue.matches("^[6-9][0-9]{9}$")) {
                    context.addMessage(null, new FacesMessage(
                        FacesMessage.SEVERITY_ERROR,
                        "Mobile number must be exactly 10 digits, cannot start with 0, and must not contain letters.",
                        null));
                    searchPerformed = false;
                    return null;
                }
                searchMobile = searchValue;
                searchByMobile();
                recipient = null;
                break;
//           
                
                
                
            case "createdAt":
                if ((fromDate == null || fromDate.isEmpty()) || 
                    (toDate == null || toDate.isEmpty())) {

                    context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Both From and To dates are required.", null));
                    searchPerformed = false;
                    return null;
                }

                searchByCreatedAtRange(); // Call to your method above
                recipient = null;
                break;



            default:
                context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Unknown search type.", null));
                recipient = null;
                recipientList = new ArrayList<>();
                searchPerformed = false;
                return null;
//              return "SearchRecipient1";
        }

        return "SearchRecipient1?faces-redirect=true";
    }
  
    
//----------Search Methods (reuse list for pagination)--------------
    public void searchByHid() {
        System.out.println("=== SEARCH BY HID ===");
        System.out.println("Searching for HID: " + searchHid);
        
        recipient = recipientDao.searchByHid(searchHid);
        recipientList = (recipient != null) ? Arrays.asList(recipient) : new ArrayList<>();
        // Clear the list results when doing HID search
        recipientList = null;
        resultList = null;       
        System.out.println("Found recipient: " + recipient);
        System.out.println("Is recipient null? " + (recipient == null));
    }
    public String selectRecipientForUpdate(Recipient selectedRecipient) {
        this.recipient = selectedRecipient;
        return "updateRecipient1.jsp"; //actual page name without .xhtml in nav-rule
    }

    public void searchByFirstName() {
    	
    	    System.out.println("=== FIRST NAME SEARCH ===");
    	    System.out.println("First name: " + searchFirstName);
    	    System.out.println("Search mode: " + nameSearchMode);
    	    
    	    if (searchFirstName == null || searchFirstName.trim().isEmpty()) {
    	        recipientList = new ArrayList<>(); // Initialize empty list
    	        return;
    	    }

    	    // Ensure nameSearchMode has a value
    	    if (nameSearchMode == null) {
    	        nameSearchMode = "contains"; // Default value
    	    }

    	    try {
    	        if ("startsWith".equalsIgnoreCase(nameSearchMode)) {
    	            recipientList = recipientDao.searchByFirstNameStartsWith(searchFirstName);
    	        } else {
    	            recipientList = recipientDao.searchByFirstNameContains(searchFirstName);
    	        }
    	        
    	        // Ensure we have a list even if DAO returns null
    	        if (recipientList == null) {
    	            recipientList = new ArrayList<>();
    	        }
    	        
    	        sortResults();
    	        resetPagination();
    	    } catch (Exception e) {
    	        recipientList = new ArrayList<>();
    	        e.printStackTrace();
    	    }
    }
    
    
    public void searchByMobile() {
        recipientList = recipientDao.searchByMobile(searchMobile);
        sortResults();
        resetPagination();
    }
    
    
    public void searchByCreatedAt() {
        recipientList = recipientDao.searchByCreatedAt(searchCreatedAt);
        sortResults();
        resetPagination();
    }

//-----------result for a single search---------
    public List<Recipient> getSingleRecipientList() {
        if (recipient != null) {
            return Arrays.asList(recipient);
        }
        return Collections.emptyList();
    }
    
    public List<Recipient> getResultList() {
        if (recipientList != null && !recipientList.isEmpty()) {
            return recipientList;
        } else if (recipient != null) {
            return Arrays.asList(recipient);
        }
        return Collections.emptyList();
    }
    
    
    



    //--------Update method WITH VALIDATIONS---------    
    private boolean validateRecipient(Recipient r, FacesContext context) {
        boolean isValid = true;

        // -------- Health ID --------
        if (r.gethId() == null || r.gethId().trim().isEmpty()) {
            context.addMessage("hId", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Health ID is required.", null));
            isValid = false;
        } else if (!r.gethId().trim().matches("^HID\\d{3}$")) {
            context.addMessage("hId", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Health ID must be in format HID001.", null));
            isValid = false;
        }

        // -------- First Name --------
        if (r.getFirstName() == null || r.getFirstName().trim().isEmpty()) {
            context.addMessage("firstName", new FacesMessage(FacesMessage.SEVERITY_ERROR, "First Name is required.", null));
            isValid = false;
        } else if (!r.getFirstName().trim().matches("^[A-Z][a-zA-Z]{1,}$")) {
            context.addMessage("firstName", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "First Name must start with a capital letter and be at least 2 characters long.", null));
                isValid = false;
            }

        // -------- Last Name --------
        if (r.getLastName() == null || r.getLastName().trim().isEmpty()) {
            context.addMessage("lastName", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Last Name is required.", null));
            isValid = false;
        } else if (r.getLastName().trim().length() < 2) {
            context.addMessage("lastName", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Last Name must be at least 2 characters.", null));
            isValid = false;
        }

        // -------- Mobile --------
        if (r.getMobile() == null || r.getMobile().trim().isEmpty()) {
            context.addMessage("mobile", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Mobile number is required.", null));
            isValid = false;
        } else if (!r.getMobile().trim().matches("^[1-9]\\d{9}$")) {
            context.addMessage("mobile", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Mobile number must be 10 digits and cannot start with 0.", null));
            isValid = false;
        }

        
     // -------- EMAIL --------
        String email = r.getEmail();
        if (email == null || email.trim().isEmpty()) {
            context.addMessage("email", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                "Email field is required.", null));
            isValid = false;
        } else if (!email.trim().matches("^[a-zA-Z0-9_%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")) {
            context.addMessage("email", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                "Invalid email format. Example: username@example.com. Use only letters, numbers, and '.', '_', '%', '+', '-' before '@'.", null));
            isValid = false;
        }
        return isValid;
    }
    
    
//----------UPDATE METHOD------------
    public String updateRecipient() {
        FacesContext context = FacesContext.getCurrentInstance();

        if (!validateRecipient(recipient, context)) {
            context.validationFailed();
            return null;
        }

        boolean updated = recipientDao.updateRecipient(recipient);

        if (updated) {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,
                "Recipient details updated successfully", " "));
            return "UpdateRecipient1"; //  valid now
        } else {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                "Update Failed,Could not update recipient details.", ""));
            return null;
        }
    }

    
    public String navigateToUpdate() {
        return "UpdateRecipient.jsp?faces-redirect=true";
    }

    public String navigateToView() {
        return "ViewRecipient.jsp?faces-redirect=true";
    }

    public String goToUpdatePage() {
        if (recipient == null || recipient.gethId() == null) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Please search and select a recipient first."));
            return "SearchRecipient?faces-redirect=true";
        }
        return "UpdateRecipient1?faces-redirect=true";
    }
    
    
//--------DISCARD METHOD for update page-----------
    
//    private String currentHid;
//
//    public String getCurrentHid() {
//        return currentHid;
//    }
//
//    public void setCurrentHid(String currentHid) {
//        this.currentHid = currentHid;
//    }
//    
//    public String resetUpdate() {
//        System.out.println("resetUpdate() called");
//
//        FacesContext context = FacesContext.getCurrentInstance();
//        String hId = context.getExternalContext().getRequestParameterMap().get("hid");
//
//        if (hId == null || hId.trim().isEmpty()) {
//            System.out.println("hId is missing!");
//            FacesContext.getCurrentInstance().addMessage(null,
//                new FacesMessage(FacesMessage.SEVERITY_ERROR, "Cannot discard. Missing hId.", ""));
//            return null;
//        }
//
//        
//        System.out.println("Reloading recipient with hId: " + hId);
//        this.recipient = recipientDao.getRecipientByhId(hId);
//        this.recipientLoaded = true;
//
//        FacesContext.getCurrentInstance().addMessage(null,
//            new FacesMessage(FacesMessage.SEVERITY_INFO, "Changes discarded. Original data restored.", ""));
//        
//        return null;
//    }

    
    
//    public String resetUpdate() {
//        System.out.println("resetUpdate() called");
//
//        String hId = currentHid; // Use value set via <f:viewParam>
//
//        if (hId == null || hId.trim().isEmpty()) {
//            System.out.println("currentHid is null or empty");
//            FacesContext.getCurrentInstance().addMessage(null,
//                new FacesMessage(FacesMessage.SEVERITY_ERROR, "Unable to discard changes. hId missing.", ""));
//            return null;
//        }
//
//        System.out.println("Reloading recipient using hId: " + hId);
//        this.recipient = recipientDao.getRecipientByhId(hId);
//        this.recipientLoaded = true;
//
//        FacesContext.getCurrentInstance().addMessage(null,
//            new FacesMessage(FacesMessage.SEVERITY_INFO, "Changes discarded. Original data restored.", ""));
//
//        return null; // Stay on same page
//    }

    
    
    
    
//    public String resetUpdate() {
//        System.out.println("resetUpdate() called");
//
//        if (recipient == null || recipient.gethId() == null) {
//            System.out.println("Recipient or hId is null, trying to read from request param");
//
//            // Backup: try reading from JSF param (in case recipient wasn't set properly)
//            String hId = FacesContext.getCurrentInstance()
//                          .getExternalContext()
//                          .getRequestParameterMap()
//                          .get("recipientForm:recipientHid");
//
//            if (hId == null || hId.trim().isEmpty()) {
//                System.out.println("hId not found in param map either.");
//                return null;
//            }
//
//            this.recipient = recipientDao.getRecipientByhId(hId);
//        } else {
//            // Primary logic
//            String hId = recipient.gethId();
//            this.recipient = recipientDao.getRecipientByhId(hId);
//        }
//
//        recipientLoaded = true;
//
//        FacesContext.getCurrentInstance().addMessage(null,
//            new FacesMessage(FacesMessage.SEVERITY_INFO, "Changes discarded. Original data restored.", ""));
//        
//        return null;
//    }
    

    
//    public String resetUpdate() {
//        if (recipient != null && recipient.gethId() != null) {
//            String hId = recipient.gethId();
//            this.recipient = recipientDao.getRecipientByhId(hId);
//            recipientLoaded = true; // Refresh flag
//            FacesContext.getCurrentInstance().addMessage(null,
//                new FacesMessage(FacesMessage.SEVERITY_INFO, "Changes discarded. Original data restored.", ""));
//        }
//        return null; // stay on same page
//    }

//    public void resetUpdate() {
//        if (this.recipient != null && this.recipient.gethId() != null) {
//            this.recipient = recipientDao.getRecipientByhId(this.recipient.gethId());
//            FacesContext.getCurrentInstance().addMessage(null,
//                new FacesMessage(FacesMessage.SEVERITY_INFO, "Changes discarded.", ""));
//            // Optional: trigger UI refresh logic if needed
//            this.searchPerformed = true; // if your page depends on this flag
//        }
//        
//    }
    
//    public void resetUpdate() {
//        System.out.println("Discard called");
//        
//        if (this.recipient != null && this.recipient.gethId() != null) {
//            String hId = this.recipient.gethId();
//            this.recipient = recipientDao.getRecipientByhId(hId);
//
//            System.out.println("Reloaded recipient from DB: " + recipient);
//
//            FacesContext.getCurrentInstance().addMessage(null,
//                new FacesMessage(FacesMessage.SEVERITY_INFO, "Changes discarded. Original data restored.", ""));
//            
//            // optional flag if any logic depends on it
//            this.searchPerformed = true;
//        } else {
//            System.out.println("Recipient or hId is null.");
//        }
//    }
    
//    public void resetUpdate() {
//        System.out.println("resetUpdate() called");
//
//        if (recipient != null && recipient.gethId() != null) {
//            // Fetch fresh data
//            Recipient fresh = recipientDao.getRecipientByhId(recipient.gethId());
//
//            if (fresh != null) {
//                // Force reassign field-by-field (deep copy)
//                recipient.setFirstName(fresh.getFirstName());
//                recipient.setLastName(fresh.getLastName());
//                recipient.setMobile(fresh.getMobile());
//                recipient.setUserName(fresh.getUserName());
//                recipient.setCreatedAt(fresh.getCreatedAt());
//                recipient.setEmail(fresh.getEmail());
//                recipient.setDob(fresh.getDob());
//                // Add any more fields as per your entity
//
//                System.out.println("Reset successful for HID: " + recipient.gethId());
//            }
//
//            FacesContext.getCurrentInstance().addMessage(null,
//                new FacesMessage(FacesMessage.SEVERITY_INFO, "Changes discarded. Original data restored.", ""));
//        }
//    }



    private boolean searchPerformed = false; // initially false

    public boolean isSearchPerformed() {
        return searchPerformed;
    }

    public void setSearchPerformed(boolean searchPerformed) {
        this.searchPerformed = searchPerformed;
    }

    
    //-------reset page-------- 
    public String resetSearch() {
    	System.out.println("=== RESETTING SEARCH ===");
        System.out.println("Current values before reset - Type: " + searchType + 
                          ", Value: " + searchValue + 
                          ", Mode: " + nameSearchMode);
        
        this.searchType = null;
        this.searchValue = null;
        this.nameSearchMode = "contains";
        this.recipient = null;
        this.recipientList = null;
        this.resultList = null;
        this.currentPage = 0;
        this.sortColumn = null;
        this.sortAscending = true;
        this.searchPerformed = false;
        
        System.out.println("Values after reset - Type: " + searchType + 
                ", Value: " + searchValue + 
                ", Mode: " + nameSearchMode);
        return null;
    }

}



